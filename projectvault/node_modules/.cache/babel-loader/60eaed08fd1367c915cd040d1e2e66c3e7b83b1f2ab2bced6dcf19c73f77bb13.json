{"ast":null,"code":"import axios from 'axios';\nconst API_URI = 'http://localhost:8000';\nexport const uploadFile = async data => {\n  try {\n    const response = await axios.post(`${API_URI}/file-upload`, data);\n    return response.data;\n  } catch (error) {\n    console.log('Error while calling the API ', error.message);\n  }\n};\nexport const uploadDocument = async ddata => {\n  console.log(JSON.stringify(ddata));\n  try {\n    const response = await axios.post(`${API_URI}/document-upload`, JSON.stringify(ddata), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.log('Error while calling the API ', error.message);\n  }\n};\nexport const addUserSignInDataToDB = async data => {\n  try {\n    const response = await axios.post(`${API_URI}/add-user-sign-in-data`, JSON.stringify(data), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.log('Error while calling the API ', error.message);\n  }\n};\nexport const checkUserExists = async data => {\n  try {\n    const response = await axios.post(`${API_URI}/check-user-exists`, JSON.stringify(data), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.log('Error while calling the API ', error.message);\n  }\n};\nexport const connectProjectToUser = async data => {\n  try {\n    const response = await axios.post(`${API_URI}/connect-project-user`, JSON.stringify(data), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.log('Error while calling the API ', error.message);\n  }\n};","map":{"version":3,"names":["axios","API_URI","uploadFile","data","response","post","error","console","log","message","uploadDocument","ddata","JSON","stringify","headers","addUserSignInDataToDB","checkUserExists","connectProjectToUser"],"sources":["C:/Users/omsin/Desktop/ProjectVault/projectvault/src/Service/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URI = 'http://localhost:8000';\r\n\r\nexport const uploadFile = async (data) => {\r\n    try {\r\n        const response = await axios.post(`${API_URI}/file-upload`, data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.log('Error while calling the API ', error.message);\r\n    }\r\n}\r\n\r\nexport const uploadDocument = async (ddata) => {\r\n    console.log(JSON.stringify(ddata));\r\n    try {\r\n        const response = await axios.post(`${API_URI}/document-upload`, JSON.stringify(ddata), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.log('Error while calling the API ', error.message);\r\n    }\r\n}\r\n\r\nexport const addUserSignInDataToDB = async (data) => {\r\n    try {\r\n        const response = await axios.post(`${API_URI}/add-user-sign-in-data`, JSON.stringify(data), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.log('Error while calling the API ', error.message);\r\n    }\r\n}\r\n\r\nexport const checkUserExists = async (data) => {\r\n    try {\r\n        const response = await axios.post(`${API_URI}/check-user-exists`, JSON.stringify(data), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.log('Error while calling the API ', error.message);\r\n    }\r\n}\r\n\r\nexport const connectProjectToUser = async (data) => {\r\n    try {\r\n        const response = await axios.post(`${API_URI}/connect-project-user`, JSON.stringify(data), {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.log('Error while calling the API ', error.message);\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAE,GAAEJ,OAAQ,cAAa,EAAEE,IAAI,CAAC;IACjE,OAAOC,QAAQ,CAACD,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAACG,OAAO,CAAC;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC3CJ,OAAO,CAACC,GAAG,CAACI,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC;EAClC,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAE,GAAEJ,OAAQ,kBAAiB,EAAEW,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,EAAE;MACnFG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACJ,OAAOV,QAAQ,CAACD,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAACG,OAAO,CAAC;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMM,qBAAqB,GAAG,MAAOZ,IAAI,IAAK;EACjD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAE,GAAEJ,OAAQ,wBAAuB,EAAEW,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,EAAE;MACxFW,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACJ,OAAOV,QAAQ,CAACD,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAACG,OAAO,CAAC;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMO,eAAe,GAAG,MAAOb,IAAI,IAAK;EAC3C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAE,GAAEJ,OAAQ,oBAAmB,EAAEW,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,EAAE;MACpFW,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACJ,OAAOV,QAAQ,CAACD,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAACG,OAAO,CAAC;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAG,MAAOd,IAAI,IAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAE,GAAEJ,OAAQ,uBAAsB,EAAEW,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,EAAE;MACvFW,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACJ,OAAOV,QAAQ,CAACD,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAACG,OAAO,CAAC;EAC9D;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}