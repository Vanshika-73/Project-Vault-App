{"ast":null,"code":"import'./UploadSuccess.css';import{useAuth0}from\"@auth0/auth0-react\";import{fetchAllProjectsOfUser,fetchProjectfromDB}from'../../Service/api';import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function UploadSuccess(){const imagePath=process.env.PUBLIC_URL+'/images/coverImage.png';const navigate=useNavigate();const{isAuthenticated,user}=useAuth0();const[project,setProject]=useState(null);const[flag,setFlag]=useState(true);// useEffect(()=>{\n//   if( ( !project || project==null) && isAuthenticated )\n//     fetchData();\n// },[]);\n// const fetchData = async () => {\n//   const response = await fetchAllProjectsOfUser(user.email);\n//   try {\n//     const projectIDs=response.projects.documents;\n//     const ID = projectIDs[projectIDs.length-1];\n//     const projectResponse = await fetchProjectfromDB(ID);\n//     setProject(projectResponse.project);\n//   } catch (error) {}      \n// };\nconst handleNewProjectPage=()=>{navigate(\"/addproject\");};const handleHomePage=()=>{navigate(\"/\");};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"success-outer-div\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"success-message-div\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"success-message\",children:\"Your project has been successfully uploaded !\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"success-project-div\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"project-reload\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"load-button\",onClick:handleNewProjectPage,children:\" Upload New Project  \"}),/*#__PURE__*/_jsx(\"button\",{className:\"load-button\",onClick:handleHomePage,children:\" Home Page \"})]})})]})});}export default UploadSuccess;","map":{"version":3,"names":["useAuth0","fetchAllProjectsOfUser","fetchProjectfromDB","React","useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","UploadSuccess","imagePath","process","env","PUBLIC_URL","navigate","isAuthenticated","user","project","setProject","flag","setFlag","handleNewProjectPage","handleHomePage","children","className","onClick"],"sources":["C:/Users/omsin/Desktop/Project Vault Main Folder/ProjectVault/projectvault/src/pages/UploadSuccess/UploadSuccess.jsx"],"sourcesContent":["import './UploadSuccess.css';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { fetchAllProjectsOfUser, fetchProjectfromDB } from '../../Service/api';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction UploadSuccess() {\r\n  const imagePath = process.env.PUBLIC_URL + '/images/coverImage.png';\r\n  const navigate = useNavigate();\r\n  const { isAuthenticated, user } = useAuth0();\r\n  const [project, setProject] = useState(null);\r\n  const [flag, setFlag] = useState(true);\r\n  // useEffect(()=>{\r\n  //   if( ( !project || project==null) && isAuthenticated )\r\n  //     fetchData();\r\n  // },[]);\r\n\r\n  // const fetchData = async () => {\r\n  //   const response = await fetchAllProjectsOfUser(user.email);\r\n  //   try {\r\n  //     const projectIDs=response.projects.documents;\r\n  //     const ID = projectIDs[projectIDs.length-1];\r\n  //     const projectResponse = await fetchProjectfromDB(ID);\r\n  //     setProject(projectResponse.project);\r\n  //   } catch (error) {}      \r\n  // };\r\n\r\n  const handleNewProjectPage = () => {\r\n    navigate(`/addproject`);\r\n  };\r\n  const handleHomePage = () => {\r\n    navigate(`/`);\r\n  };\r\n  return (\r\n    <>\r\n      <div className='success-outer-div'>\r\n        <div className='success-message-div'>\r\n          <h1 className='success-message'>Your project has been successfully uploaded !</h1>\r\n        </div>\r\n        <div className='success-project-div'>\r\n          <div className='project-reload'>\r\n            <button className='load-button' onClick={handleNewProjectPage} > Upload New Project  </button>\r\n            <button className='load-button' onClick={handleHomePage} > Home Page </button>\r\n          </div>\r\n        </div>\r\n        {/* <div className='success-project-div'>\r\n          { project && \r\n            <div className='success-project' onClick={handleProjectClick}>\r\n              <div className='success-project-LHS'>\r\n                { project.coverphoto \r\n                  ? <img src={project.coverphoto} />\r\n                  : <img src={imagePath} />\r\n                }\r\n              </div>\r\n              <div className='success-project-RHS'>\r\n                <p className='project-title'>{project.title}</p>\r\n                <p className='project-desc'>\r\n                  {project.description.length > 90 ? project.description.slice(0, 90)+\"...\" : project.description}\r\n                </p>\r\n                <p className='project-price'>â‚¹{project.price}</p>\r\n                <div className='project-docs'>\r\n                  {project.documents.map((docs,index) => (\r\n                    <div key={index}>\r\n                      { index<2 && <div className='project-doc'><p>{docs.key}</p></div>}\r\n                      { index==2 && <div className='project-doc'><p>...</p></div>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          { !project &&\r\n            <div className='project-reload'>\r\n              <p>Cannot load project at the moment</p>\r\n              <button className='load-button' onClick={fetchData} > Reload </button>\r\n            </div>\r\n          }\r\n        </div> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UploadSuccess;\r\n"],"mappings":"AAAA,MAAO,qBAAqB,CAC5B,OAASA,QAAQ,KAAQ,oBAAoB,CAC7C,OAASC,sBAAsB,CAAEC,kBAAkB,KAAQ,mBAAmB,CAC9E,MAAO,CAAAC,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAE/C,QAAS,CAAAC,aAAaA,CAAA,CAAG,CACvB,KAAM,CAAAC,SAAS,CAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,wBAAwB,CACnE,KAAM,CAAAC,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEa,eAAe,CAAEC,IAAK,CAAC,CAAGpB,QAAQ,CAAC,CAAC,CAC5C,KAAM,CAACqB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACmB,IAAI,CAAEC,OAAO,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CACtC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAAAqB,oBAAoB,CAAGA,CAAA,GAAM,CACjCP,QAAQ,cAAc,CAAC,CACzB,CAAC,CACD,KAAM,CAAAQ,cAAc,CAAGA,CAAA,GAAM,CAC3BR,QAAQ,IAAI,CAAC,CACf,CAAC,CACD,mBACEV,IAAA,CAAAI,SAAA,EAAAe,QAAA,cACEjB,KAAA,QAAKkB,SAAS,CAAC,mBAAmB,CAAAD,QAAA,eAChCnB,IAAA,QAAKoB,SAAS,CAAC,qBAAqB,CAAAD,QAAA,cAClCnB,IAAA,OAAIoB,SAAS,CAAC,iBAAiB,CAAAD,QAAA,CAAC,+CAA6C,CAAI,CAAC,CAC/E,CAAC,cACNnB,IAAA,QAAKoB,SAAS,CAAC,qBAAqB,CAAAD,QAAA,cAClCjB,KAAA,QAAKkB,SAAS,CAAC,gBAAgB,CAAAD,QAAA,eAC7BnB,IAAA,WAAQoB,SAAS,CAAC,aAAa,CAACC,OAAO,CAAEJ,oBAAqB,CAAAE,QAAA,CAAE,uBAAqB,CAAQ,CAAC,cAC9FnB,IAAA,WAAQoB,SAAS,CAAC,aAAa,CAACC,OAAO,CAAEH,cAAe,CAAAC,QAAA,CAAE,aAAW,CAAQ,CAAC,EAC3E,CAAC,CACH,CAAC,EAkCH,CAAC,CACN,CAAC,CAEP,CAEA,cAAe,CAAAd,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}